version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oracle-postgres
    environment:
      POSTGRES_DB: oracle_db
      POSTGRES_USER: oracle_user
      POSTGRES_PASSWORD: oracle_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U oracle_user -d oracle_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oracle-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oracle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oracle-network

  # NATS Message Queue
  nats:
    image: nats:2.9-alpine
    container_name: oracle-nats
    ports:
      - "4222:4222"
      - "8222:8222" # HTTP monitoring
    command: nats-server --jetstream --http_port 8222
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oracle-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: oracle-backend
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - DATABASE_URL=postgres://oracle_user:oracle_password@postgres:5432/oracle_db?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - NATS_SUBJECT=prices.ethusd
      - COINGECKO_URL=https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd
      - FETCH_INTERVAL=30s
      - FETCH_TIMEOUT=10s
      - PRICE_CHANGE_THRESHOLD=0.005
      - CACHE_EXPIRATION=1h
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - oracle-network

  # Updater Worker
  updater:
    build:
      context: ./updater
      dockerfile: Dockerfile
    container_name: oracle-updater
    environment:
      - NATS_URL=nats://nats:4222
      - SUBJECT=prices.ethusd
      - ETH_RPC=https://eth-sepolia.g.alchemy.com/v2/6ChCkEoo-jvGgoa85eb9G
      - PRIVATE_KEY=${ETH_PRIVATE_KEY}
      - GAS_LIMIT=200000
      - THRESHOLD=0.005
    depends_on:
      nats:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "./main" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - oracle-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: oracle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - oracle-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: oracle-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - oracle-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oracle-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./monitoring/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - prometheus
      - grafana
    networks:
      - oracle-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:


networks:
  oracle-network:
    driver: bridge
